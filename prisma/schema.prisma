generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  role       UserRole   @default(ADMIN)
  status     UserStatus @default(ACTIVE)
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  productCategory ProductCategory[]
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model ProductCategory {
  product_id    Int
  product_sku   String
  category_name String
  category_id   Int
  category      Category @relation(fields: [category_id], references: [id])
  product       Product  @relation(fields: [product_id], references: [id])

  @@id([product_id, category_id])
}

model Product {
  id                    Int               @id @default(autoincrement())
  sku                   String            @unique
  name                  String            @unique
  description           String?
  image                 String?
  qtyThreshold          Int?
  brand_id              Int
  brand                 Brand             @relation(fields: [brand_id], references: [id])
  stockQuantity         StockQuantity[]
  productCategory       ProductCategory[]
  bundleProduct         BundleProduct[]
}

model Location {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  address       String
  stockQuantity StockQuantity[]
}

model StockQuantity {
  product_id           Int
  product_name         String
  product_sku          String
  location_id          Int
  quantity             Int
  price                Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  product_qtyThreshold Int?
  location             Location @relation(fields: [location_id], references: [id])
  product              Product  @relation(fields: [product_id], references: [id])

  @@id([product_id, location_id])
}

model Bundle {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String
  price         Float
  bundleProduct BundleProduct[]
}

model BundleProduct {
  bundle_id   Int
  product_id  Int
  product_sku String
  bundle_name String
  bundle      Bundle  @relation(fields: [bundle_id], references: [id])
  product     Product @relation(fields: [product_id], references: [id])

  @@id([product_id, bundle_id])
}

model ProcurementOrder {
  id                Int                    @id @default(autoincrement())
  order_date        DateTime
  description       String
  total_amount      Float
  payment_status    PaymentStatus @default(PENDING)
  fulfilment_status FulfilmentStatus @default(CREATED)
  proc_order_items  ProcurementOrderItem[]
  supplier_id       Int
  supplier          Supplier               @relation(fields: [supplier_id], references: [id])
}

model ProcurementOrderItem {
  id              Int @id @default(autoincrement())
  quantity        Int
  proc_order      ProcurementOrder @relation(fields: [proc_order_id], references: [id])
  proc_order_id   Int
  product_sku     String
  product_name    String
  rate            Float
}

model Supplier {
  id               Int                @id @default(autoincrement())
  email            String
  name             String
  address          String
  proc_order_items ProcurementOrder[]
}

enum UserRole {
  ADMIN
  INTERN
  PARTTIME
  FULLTIME
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum FulfilmentStatus {
  CREATED
  ARRIVED
  COMPLETED
}
